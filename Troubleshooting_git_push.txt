O erro que você está enfrentando ocorre porque o histórico do seu repositório local está atrás do histórico do repositório remoto. Para resolver isso, siga estes passos:

Sincronizar o repositório local com o remoto: Primeiramente, você precisa integrar as alterações do repositório remoto ao seu repositório local. Isso pode ser feito usando o comando git pull:
git pull origin main

Isso vai trazer as mudanças do repositório remoto para o seu repositório local. Se houver conflitos, você precisará resolvê-los antes de continuar.

Enviar as mudanças locais para o repositório remoto: Depois que o repositório local estiver atualizado com as mudanças do remoto, você pode tentar fazer o push novamente:
git push origin main

#########################
#Nota:Se o problema persistir ou você tiver conflitos ao fazer o pull, posso ajudar com as etapas específicas de resolução.

[root@rgl Git]# git push origin main
To github.com:acaluege/Git.git
 ! [rejected]        main -> main (non-fast-forward)
error: failed to push some refs to 'github.com:acaluege/Git.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. If you want to integrate the remote changes,
hint: use 'git pull' before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

Parece que você ainda está com o problema de o histórico do repositório local estar atrás do repositório remoto. Vamos tentar uma abordagem um pouco mais detalhada:

1. Verificar o status do repositório
Verifique o status do repositório para entender se há mudanças não comitadas:
git status


Certifique-se de que tudo está comitado antes de prosseguir.

2. Fazer o pull com rebase
Em vez de apenas fazer o pull, podemos usar a opção --rebase, que coloca suas mudanças locais no topo das mudanças do repositório remoto, minimizando possíveis conflitos:
git pull --rebase origin main

Isso fará o pull das mudanças do repositório remoto e aplicará as suas mudanças locais por cima das mudanças que vieram do repositório remoto.

3. Resolver conflitos (se houver)
Se houver conflitos, o Git vai informar quais arquivos estão em conflito. Você precisará resolver manualmente cada um deles e depois continuar o processo com:
git rebase --continue


4. Enviar as mudanças para o repositório remoto
Após a atualização bem-sucedida com o rebase, você pode tentar o git push novamente:
git push origin main


#Nota:
Parece que você ainda está com o problema de o histórico do repositório local estar atrás do repositório remoto. Vamos tentar uma abordagem um pouco mais detalhada:

























